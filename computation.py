"""CSC110 Fall 2020 Project Phase 2

Instructions (READ THIS FIRST!)
===============================

# TO BE FILLED OUT


Copyright and Usage Information
===============================

This file is provided solely for the personal and private use of TAs and
instructors of  CSC110 at the University of Toronto St. George campus.
All forms of distribution of this code, whether as given or with any changes,
are expressly prohibited.

This file is Copyright (c) 2020 Jia Hao Choo and Komal Saini.
"""

from dataclasses import dataclass, field
from typing import Dict, List

import read_csv


@dataclass
class Emissions:
    """A data class that represents the emissions generated by each industry in a country.

    Instance Attributes:
        - country_code: A string representing the country code.
        - industry_emissions: A list of industrial emissions each year.
        - manufacture_emissions: A list of manufacturing emissions each year.
        - agriculture_emissions: A list of agricultural emissions each year.

    Representation Invariants:
        - len(country_code) == 3
        - len(industry_emissions) > 0
        - len(manufacture_emissions) > 0
        - len(agriculture_emissions) > 0

    >>> canadian_emissions = Emissions("CAN", [2.0, 3.0], [1.0, 3.0], [1.0, 2.0])
    """
    country_code: str
    industry_emissions: List[float]
    manufacture_emissions: List[float]
    agriculture_emissions: List[float]


@dataclass
class Values:
    """A data class that represents the revenue generated by each industry in a country.

     Instance Attributes:
         - country_code: A string representing the country code.
         - industry_value: A list of the revenue generated by the industrial sector each year.
         - manufacture_value: A list of the revenue generated by the manufacturing sector each year.
         - agriculture_value: A list of the revenue generated by the agricultural sector each year.

     Representation Invariants:
         - len(country_code) == 3
         - len(industry_value) > 0
         - len(manufacture_value) > 0
         - len(agriculture_value) > 0

     >>> canadian_values = Values("CAN", [3.80,3.56], [1.06,1.04], [12.2,1.9])
     """
    country_code: str
    industry_value: List[float]
    manufacture_value: List[float]
    agriculture_value: List[float]


@dataclass
class Country:
    """A data class that represents a country.

    Instance Attributes:
        - country_code: A string representing the country code.
        - region: A string representing the country's region.
        - income_group: A string representing the country's income group (also referred to as income classification).
        - name: A string representing the full name of the country.

    Representation Invariants:
        - len(country_code) == 3

    >>> canada = Country("CAN", "North America", "High income", "Canada")
    """
    country_code: str
    region: str
    income_group: str
    name: str


def init_countries() -> Dict[str, Country]:
    """Returns a dictionary of Country objects keyed by the country code."""
    countries = dict()
    countries_data = read_csv.read_country_data()
    for country_data in countries_data:
        [code, region, income_group, name] = country_data
        countries[code] = Country(country_code=code, region=region, income_group=income_group, name=name)
    return countries


def init_emissions() -> Dict[str, Emissions]:
    """Returns a dictionary of Emissions objects keyed by the country code."""
    emissions = dict()
    agriculture_data = read_csv.read_emissions_data('Agriculture')
    industry_data = read_csv.read_emissions_data('Industry')
    manufacture_data = read_csv.read_emissions_data('Manufacturing')

    for code in agriculture_data:
        emissions[code] = Emissions(country_code=code, industry_emissions=industry_data[code],
                                    manufacture_emissions=manufacture_data[code],
                                    agriculture_emissions=agriculture_data[code])

    return emissions


def init_values() -> Dict[str, Values]:
    """Returns a dictionary of Values objects keyed by the country code."""
    values = dict()
    agriculture_data = read_csv.read_value_data('Agriculture')
    industry_data = read_csv.read_value_data('Industry')
    manufacture_data = read_csv.read_value_data('Manufacturing')

    for code in agriculture_data:
        values[code] = Values(country_code=code, agriculture_value=agriculture_data[code],
                              industry_value=industry_data[code], manufacture_value=manufacture_data[code])

    return values


if __name__ == '__main__':
    import python_ta

    # python_ta.check_all(config={
    #     'max-line-length': 100,
    #     'allowed-io': [],  # the names (strs) of functions that call print/open/input
    #     'extra-imports': [],  # the names (strs) of imported modules
    #     'disable': ['R1705', 'C0200'],
    # })

    import python_ta.contracts

    python_ta.contracts.DEBUG_CONTRACTS = False
    python_ta.contracts.check_all_contracts()

    import doctest

    doctest.testmod()
